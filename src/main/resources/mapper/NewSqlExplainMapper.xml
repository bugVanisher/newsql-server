<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mbappe.newsql.newsql.mapper.NewSqlExplainMapper">
  <resultMap id="BaseResultMap" type="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="eid" jdbcType="BIGINT" property="eid" />
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="select_type" jdbcType="VARCHAR" property="selectType" />
    <result column="tablename" jdbcType="VARCHAR" property="tablename" />
    <result column="partitions_" jdbcType="VARCHAR" property="partitions" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="possible_keys" jdbcType="VARCHAR" property="possibleKeys" />
    <result column="key_" jdbcType="VARCHAR" property="key" />
    <result column="key_len" jdbcType="VARCHAR" property="keyLen" />
    <result column="ref" jdbcType="VARCHAR" property="ref" />
    <result column="rows_" jdbcType="VARCHAR" property="rows" />
    <result column="filtered" jdbcType="VARCHAR" property="filtered" />
    <result column="Extra" jdbcType="VARCHAR" property="extra" />
    <result column="slevel" jdbcType="VARCHAR" property="slevel" />
    <result column="ctime" jdbcType="INTEGER" property="ctime" />
    <result column="utime" jdbcType="INTEGER" property="utime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="new_sql" jdbcType="LONGVARCHAR" property="newSql" />
  </resultMap>
  <sql id="Param_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Param_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="newSqlExplainParam.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    eid, id, select_type, tablename, partitions_, type, possible_keys, key_, key_len, 
    ref, rows_, filtered, Extra, slevel, ctime, utime
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    new_sql
  </sql>
  <select id="selectByParamWithBLOBs" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from new_sqls_explain
    <if test="_parameter != null">
      <include refid="Param_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="page">
      limit #{pageIndex},#{pageSize}
    </if>
  </select>
  <select id="selectByParam" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from new_sqls_explain
    <if test="_parameter != null">
      <include refid="Param_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="page">
      limit #{pageIndex},#{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from new_sqls_explain
    where eid = #{eid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from new_sqls_explain
    where eid = #{eid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByParam">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from new_sqls_explain
    <if test="_parameter != null">
      <include refid="Param_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into new_sqls_explain (eid, id, select_type, 
      tablename, partitions_, type, 
      possible_keys, key_, key_len, 
      ref, rows_, filtered, 
      Extra, slevel, ctime, 
      utime, new_sql)
    values (#{eid,jdbcType=BIGINT}, #{id,jdbcType=BIGINT}, #{selectType,jdbcType=VARCHAR}, 
      #{tablename,jdbcType=VARCHAR}, #{partitions,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{possibleKeys,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR}, #{keyLen,jdbcType=VARCHAR}, 
      #{ref,jdbcType=VARCHAR}, #{rows,jdbcType=VARCHAR}, #{filtered,jdbcType=VARCHAR}, 
      #{extra,jdbcType=VARCHAR}, #{slevel,jdbcType=VARCHAR}, #{ctime,jdbcType=INTEGER}, 
      #{utime,jdbcType=INTEGER}, #{newSql,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into new_sqls_explain
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        eid,
      </if>
      <if test="id != null">
        id,
      </if>
      <if test="selectType != null">
        select_type,
      </if>
      <if test="tablename != null">
        tablename,
      </if>
      <if test="partitions != null">
        partitions_,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="possibleKeys != null">
        possible_keys,
      </if>
      <if test="key != null">
        key_,
      </if>
      <if test="keyLen != null">
        key_len,
      </if>
      <if test="ref != null">
        ref,
      </if>
      <if test="rows != null">
        rows_,
      </if>
      <if test="filtered != null">
        filtered,
      </if>
      <if test="extra != null">
        Extra,
      </if>
      <if test="slevel != null">
        slevel,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="utime != null">
        utime,
      </if>
      <if test="newSql != null">
        new_sql,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        #{eid,jdbcType=BIGINT},
      </if>
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="selectType != null">
        #{selectType,jdbcType=VARCHAR},
      </if>
      <if test="tablename != null">
        #{tablename,jdbcType=VARCHAR},
      </if>
      <if test="partitions != null">
        #{partitions,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="possibleKeys != null">
        #{possibleKeys,jdbcType=VARCHAR},
      </if>
      <if test="key != null">
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="keyLen != null">
        #{keyLen,jdbcType=VARCHAR},
      </if>
      <if test="ref != null">
        #{ref,jdbcType=VARCHAR},
      </if>
      <if test="rows != null">
        #{rows,jdbcType=VARCHAR},
      </if>
      <if test="filtered != null">
        #{filtered,jdbcType=VARCHAR},
      </if>
      <if test="extra != null">
        #{extra,jdbcType=VARCHAR},
      </if>
      <if test="slevel != null">
        #{slevel,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=INTEGER},
      </if>
      <if test="utime != null">
        #{utime,jdbcType=INTEGER},
      </if>
      <if test="newSql != null">
        #{newSql,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByParam" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from new_sqls_explain
    <if test="_parameter != null">
      <include refid="Param_Where_Clause" />
    </if>
  </select>
  <update id="updateByParamSelective">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    <set>
      <if test="record.eid != null">
        eid = #{record.eid,jdbcType=BIGINT},
      </if>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.selectType != null">
        select_type = #{record.selectType,jdbcType=VARCHAR},
      </if>
      <if test="record.tablename != null">
        tablename = #{record.tablename,jdbcType=VARCHAR},
      </if>
      <if test="record.partitions != null">
        partitions_ = #{record.partitions,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.possibleKeys != null">
        possible_keys = #{record.possibleKeys,jdbcType=VARCHAR},
      </if>
      <if test="record.key != null">
        key_ = #{record.key,jdbcType=VARCHAR},
      </if>
      <if test="record.keyLen != null">
        key_len = #{record.keyLen,jdbcType=VARCHAR},
      </if>
      <if test="record.ref != null">
        ref = #{record.ref,jdbcType=VARCHAR},
      </if>
      <if test="record.rows != null">
        rows_ = #{record.rows,jdbcType=VARCHAR},
      </if>
      <if test="record.filtered != null">
        filtered = #{record.filtered,jdbcType=VARCHAR},
      </if>
      <if test="record.extra != null">
        Extra = #{record.extra,jdbcType=VARCHAR},
      </if>
      <if test="record.slevel != null">
        slevel = #{record.slevel,jdbcType=VARCHAR},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=INTEGER},
      </if>
      <if test="record.utime != null">
        utime = #{record.utime,jdbcType=INTEGER},
      </if>
      <if test="record.newSql != null">
        new_sql = #{record.newSql,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Param_Where_Clause" />
    </if>
  </update>
  <update id="updateByParamWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    set eid = #{record.eid,jdbcType=BIGINT},
      id = #{record.id,jdbcType=BIGINT},
      select_type = #{record.selectType,jdbcType=VARCHAR},
      tablename = #{record.tablename,jdbcType=VARCHAR},
      partitions_ = #{record.partitions,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      possible_keys = #{record.possibleKeys,jdbcType=VARCHAR},
      key_ = #{record.key,jdbcType=VARCHAR},
      key_len = #{record.keyLen,jdbcType=VARCHAR},
      ref = #{record.ref,jdbcType=VARCHAR},
      rows_ = #{record.rows,jdbcType=VARCHAR},
      filtered = #{record.filtered,jdbcType=VARCHAR},
      Extra = #{record.extra,jdbcType=VARCHAR},
      slevel = #{record.slevel,jdbcType=VARCHAR},
      ctime = #{record.ctime,jdbcType=INTEGER},
      utime = #{record.utime,jdbcType=INTEGER},
      new_sql = #{record.newSql,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Param_Where_Clause" />
    </if>
  </update>
  <update id="updateByParam">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    set eid = #{record.eid,jdbcType=BIGINT},
      id = #{record.id,jdbcType=BIGINT},
      select_type = #{record.selectType,jdbcType=VARCHAR},
      tablename = #{record.tablename,jdbcType=VARCHAR},
      partitions_ = #{record.partitions,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      possible_keys = #{record.possibleKeys,jdbcType=VARCHAR},
      key_ = #{record.key,jdbcType=VARCHAR},
      key_len = #{record.keyLen,jdbcType=VARCHAR},
      ref = #{record.ref,jdbcType=VARCHAR},
      rows_ = #{record.rows,jdbcType=VARCHAR},
      filtered = #{record.filtered,jdbcType=VARCHAR},
      Extra = #{record.extra,jdbcType=VARCHAR},
      slevel = #{record.slevel,jdbcType=VARCHAR},
      ctime = #{record.ctime,jdbcType=INTEGER},
      utime = #{record.utime,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Param_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    <set>
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="selectType != null">
        select_type = #{selectType,jdbcType=VARCHAR},
      </if>
      <if test="tablename != null">
        tablename = #{tablename,jdbcType=VARCHAR},
      </if>
      <if test="partitions != null">
        partitions_ = #{partitions,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="possibleKeys != null">
        possible_keys = #{possibleKeys,jdbcType=VARCHAR},
      </if>
      <if test="key != null">
        key_ = #{key,jdbcType=VARCHAR},
      </if>
      <if test="keyLen != null">
        key_len = #{keyLen,jdbcType=VARCHAR},
      </if>
      <if test="ref != null">
        ref = #{ref,jdbcType=VARCHAR},
      </if>
      <if test="rows != null">
        rows_ = #{rows,jdbcType=VARCHAR},
      </if>
      <if test="filtered != null">
        filtered = #{filtered,jdbcType=VARCHAR},
      </if>
      <if test="extra != null">
        Extra = #{extra,jdbcType=VARCHAR},
      </if>
      <if test="slevel != null">
        slevel = #{slevel,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=INTEGER},
      </if>
      <if test="utime != null">
        utime = #{utime,jdbcType=INTEGER},
      </if>
      <if test="newSql != null">
        new_sql = #{newSql,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where eid = #{eid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    set id = #{id,jdbcType=BIGINT},
      select_type = #{selectType,jdbcType=VARCHAR},
      tablename = #{tablename,jdbcType=VARCHAR},
      partitions_ = #{partitions,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      possible_keys = #{possibleKeys,jdbcType=VARCHAR},
      key_ = #{key,jdbcType=VARCHAR},
      key_len = #{keyLen,jdbcType=VARCHAR},
      ref = #{ref,jdbcType=VARCHAR},
      rows_ = #{rows,jdbcType=VARCHAR},
      filtered = #{filtered,jdbcType=VARCHAR},
      Extra = #{extra,jdbcType=VARCHAR},
      slevel = #{slevel,jdbcType=VARCHAR},
      ctime = #{ctime,jdbcType=INTEGER},
      utime = #{utime,jdbcType=INTEGER},
      new_sql = #{newSql,jdbcType=LONGVARCHAR}
    where eid = #{eid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update new_sqls_explain
    set id = #{id,jdbcType=BIGINT},
      select_type = #{selectType,jdbcType=VARCHAR},
      tablename = #{tablename,jdbcType=VARCHAR},
      partitions_ = #{partitions,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      possible_keys = #{possibleKeys,jdbcType=VARCHAR},
      key_ = #{key,jdbcType=VARCHAR},
      key_len = #{keyLen,jdbcType=VARCHAR},
      ref = #{ref,jdbcType=VARCHAR},
      rows_ = #{rows,jdbcType=VARCHAR},
      filtered = #{filtered,jdbcType=VARCHAR},
      Extra = #{extra,jdbcType=VARCHAR},
      slevel = #{slevel,jdbcType=VARCHAR},
      ctime = #{ctime,jdbcType=INTEGER},
      utime = #{utime,jdbcType=INTEGER}
    where eid = #{eid,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="com.mbappe.newsql.newsql.ddl.NewSqlExplainDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into new_sqls_explain
    <trim prefix="(" suffix=")" suffixOverrides=",">
      eid,id,select_type,tablename,partitions_,type,possible_keys,key_,key_len,ref,rows_,filtered,Extra,slevel,ctime,utime,new_sql,
    </trim>
    values
    <foreach collection="list" index="index" item="item" separator=",">
      (
      <trim suffixOverrides=",">
        #{item.eid,jdbcType=BIGINT},#{item.id,jdbcType=BIGINT},#{item.selectType,jdbcType=VARCHAR},#{item.tablename,jdbcType=VARCHAR},#{item.partitions,jdbcType=VARCHAR},#{item.type,jdbcType=VARCHAR},#{item.possibleKeys,jdbcType=VARCHAR},#{item.key,jdbcType=VARCHAR},#{item.keyLen,jdbcType=VARCHAR},#{item.ref,jdbcType=VARCHAR},#{item.rows,jdbcType=VARCHAR},#{item.filtered,jdbcType=VARCHAR},#{item.extra,jdbcType=VARCHAR},#{item.slevel,jdbcType=VARCHAR},#{item.ctime,jdbcType=INTEGER},#{item.utime,jdbcType=INTEGER},#{item.newSql,jdbcType=LONGVARCHAR},
      </trim>
      )
    </foreach>
  </insert>
</mapper>